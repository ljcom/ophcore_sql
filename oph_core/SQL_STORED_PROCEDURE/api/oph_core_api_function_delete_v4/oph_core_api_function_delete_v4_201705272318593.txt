

CREATE PROCEDURE [api].[function_delete_v4]
	@accountid varchar(50), @dbcore varchar(50), 
	@hostGUID uniqueidentifier, @code varchar(20), @GUID uniqueidentifier, @comment varchar(max), @isDebug bit=0
--WITH ENCRYPTION
as	
	declare @msg nvarchar(200)

	declare @ver varchar(10), @db varchar(50), @typecode varchar(1)
	exec gen.getDBInfo @accountid, @dbcore, @code, @ver output, @db output, @typecode output

	print '[api].[function_delete_v4]'
	declare @isUpdateDelete bit, @PrimaryKey nvarchar(50), @sqlstr nvarchar(4000)

	if @typecode<>'C'
	begin
		set @code='docm'
		set @isupdateDelete=1
		set @primaryKey='docGUID'
	end
	else begin
		exec gen.[checkIsDeleted] @accountid, @dbcore, @code, @isUpdateDelete OUTPUT
		--set @PrimaryKey = api.fn_PrimaryKey (@code)
		exec api.getPrimaryKey @accountid, @dbcore, @code, @PrimaryKey OUTPUT
	end

	if @isUpdateDelete = 1 begin
		set @sqlstr = 'update ' + QUOTENAME(@code) + ' set isDeleted = 1 where ' + @PrimaryKey + ' = ''' + CAST(@GUID as varchar(50)) + ''''
	end
	else begin
		set @sqlstr = 'delete from ' + quotename(@code) + ' where ' + @PrimaryKey + ' = ''' + CAST(@GUID as varchar(50)) + ''''
	end

	if @isdebug=1 print @sqlstr

	begin try
		exec(@sqlstr)
	end try
	begin catch
		if @isdebug=1 print @sqlstr
		set @msg = ERROR_MESSAGE()
	end catch

	select @msg message

