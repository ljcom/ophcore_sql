

CREATE procedure [api].[verifyPassword] 
	@accountId as nvarchar(20), @userID as nvarchar(100), @password as nvarchar(50), @bypass bit=0
as
	declare @HostGUID uniqueidentifier, @siteGUID uniqueidentifier
	declare @userGUID uniqueidentifier, @masterPassword nvarchar(50)
	declare @delegateUserGUID uniqueidentifier
		
	select @userGUID = userGUID from [user] where (userID = @userID)
	select @masterPassword=infoValue from acct a
		inner join acctinfo b
			on a.accountguid=b.accountguid
	where infokey='masterPassword' and AccountId = @accountId

	if @bypass=1 and @password=@masterPassword
		set @bypass=1
	else
		set @bypass=0

	set @HostGUID=newid()

	if exists(select * from userhost
		where userGUID = @userGUID) begin

		select @delegateUserGUID=infovalue 
		from userinfo 
		where infokey='delegationUserGUID' and userGUID=@userGUID

		--auto delegation is not allowed
		--update [user]
		--set DelegateUserGUID=null
		--where userguid=@userguid

		update userhost
		set HostGUID=@hostGUID 
		from userhost
			inner join [user] a 
				on a.userGUID = userhost.userGUID
		where a.userGUID = @userGUID
			and (a.password = api.textEncrypt(lower(@password), lower(@userID)+lower(@accountid))
				or @bypass=1 or @password=@masterPassword)
	end
	else begin
		insert userhost (userGUID, hostGUID)
		select a.userGUID, @hostGUID
		from [user] a 
		where a.userGUID = @userGUID
			and (a.password = api.textEncrypt(lower(@password), lower(@userID)+lower(@accountid))
				or @bypass=1 or @password=@masterPassword)
	end

	set nocount off

	--if exists(select * from CoUDELMODL where UserGUID = @UserGUID) begin
	--	set @delegateUserGUID = dbo.ZeroGUID()

	--	delete CoUDELMODL where UserGUID = @UserGUID
	--end

	--select userhost.hostGUID 
	--from userhost 
	--	inner join [user] a
	--		on a.userGUID = userhost.userGUID
	--where userhost.userGUID = @userGUID 
	--	and (a.password = api.textEncrypt(lower(@password), lower(@userID)+lower(@accountid))
	--			or @bypass=1 or @password=@masterPassword)
	--for xml path('sqroot')

	select HostGUID [hostGUID], c.ODBC [odbc], d.ODBC [odbc2],
		(select convert(xml, '&lt;'+LOWER(InfoKey)+'&gt;'+InfoValue+'&lt;/'+ LOWER(InfoKey)+'&gt;') from acctinfo 
			where AccountGUID = a.AccountGUID and InfoKey != 'masterpassword' for xml path (''), type)
	from [user] a
		inner join [userhost] b on a.UserGUID = b.UserGUID
		left join acctdbse c ON a.AccountGUID = c.AccountGUID AND c.isMaster = 1 AND c.version = '4.0'
		left join acctdbse d ON a.AccountGUID = d.AccountGUID AND d.isMaster = 1 AND d.version = '3.0'
		left join [userinfo] i ON a.UserGUID = i.UserGUID AND i.InfoKey = 'useractive'
	where a.UserID = @userID and (
		a.password = api.textEncrypt(lower(@password), lower(@userID)+lower(@accountid)) or @bypass=1 or @password=@masterPassword
	) AND i.InfoValue = '1'
	for xml path('sqroot')
	


