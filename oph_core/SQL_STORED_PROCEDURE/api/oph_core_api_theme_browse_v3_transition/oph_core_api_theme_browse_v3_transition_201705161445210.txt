
CREATE procedure [api].[theme_browse_v3_transition] @accountid nvarchar(50), @dbcore nvarchar(50), 
	@hostGUID uniqueidentifier,
	@code nvarchar(100), 
	@sqlFilter nvarchar(max)='', 
	@searchText nvarchar(max)='', 
	@pgNo int=1, 
	@nbRows int=10,
	@sortOrder nvarchar(max)='', 
	@stateid nvarchar(10)=null, 
	@isdebug int=0
--WITH ENCRYPTION
as

	declare @ver nvarchar(10), @db nvarchar(50), @typecode nvarchar(1), @theme nvarchar(50)
	exec gen.getDBInfo @accountid, @dbcore, @code, @ver output, @db output, @typecode output, @theme output

	declare @sqlstr nvarchar(max)

	if @sqlfilter !='' set @sqlFilter = 'and ' +@sqlfilter

	--get sort order
	if isnull(@sortOrder,'')<>''
		set @sortorder=@sortorder+', '
	else
		select @sortorder=b.infovalue+', ' 
		from modl a
			inner join modlinfo b on a.moduleguid=b.moduleguid and b.infokey='orderField'
		where a.moduleid=@code

	--get authorization
	declare --@code nvarchar(10)='tafass', @HostGUID uniqueidentifier='A301DDF2-763B-42C3-BB8C-799091ADB6FD', 
	@allowadd bit, @allowBrowse bit, @allowEdit bit, @allowDelete bit, @allowWipe bit, @allowForce bit

	exec gen.verifyAuth @code, @HostGUID, 
		@allowadd output, @allowBrowse output, @allowEdit output, @allowDelete output, @allowWipe output, @allowForce output

	--get parent 
	--Stateid for detail
	declare @PARNMODLGUID uniqueidentifier, @PARNCODE nvarchar(20), @PARNSTATE nvarchar(5), @parentTypeCode nvarchar(1) 
	
	select @PARNMODLGUID = ParentModuleGUID 
	from modl a
	where ModuleID = @code 

	if @PARNMODLGUID is NOT NULL begin
		print 'xxx'
		select @PARNCODE = ModuleID from modl where ModuleGUID = @PARNMODLGUID
		exec gen.getDBInfo @accountid, @dbcore, @PARNCODE, @moduletype= @parentTypeCode output
		print @PARNCODE 
		--set @sqlstr = 'select @stats=cast([Status] as nvarchar(5)) from '+@code+' where 1=1 '+@sqlFilter
		--exec sp_executesql @sqlstr, N'@stats nvarchar(5) OUTPUT', @stats = @PARNSTATE OUTPUT
		--print 'Parent State: '+@PARNSTATE
	end

	declare @statecode nvarchar(1)='a'
	declare @setstatus nvarchar(100)

	if ISNUMERIC(@stateid)= 0 OR @stateid is null begin
		set @stateid = null
		set @setstatus = 'and status is not null '
	end
	else begin
		set @setstatus = 'and status ='+@stateid+' '
	end

	if @stateid is null
	begin
		set @stateid=(
			select top 1 c.StateID
			from modl a
				inner join mstastat c on c.modulestatusguid=a.ModuleStatusGUID
			where a.ModuleID=@code 
			order by isDefault desc)
	end

	if (convert(int,@stateid) < 400) set @statecode  ='a'
	else if (convert(int,@stateid) = 999) set @statecode  ='d'
	else if (convert(int,@stateid) > 499) set @statecode  ='c'
	else if (convert(int,@stateid) < 500 and convert(int,@stateid) > 399)  set @statecode = 'e'
	else set @statecode = 'a'

	declare @acode nvarchar(14), @tblCode nvarchar(20)
	set @acode= left(@code,1)+'a'+substring(@code,3,len(@code)-2)
	set @tblCode = left(@code,1)+@statecode+substring(@code,3,len(@code)-2)


	--set userGUID and accountGUID
	declare @userGUID uniqueidentifier

	select @userGUID=a.userGUID--, @accountGUID=b.accountGUID, @accountid=AccountId
	from userhost a 
		inner join [user] b on a.userguid=b.userguid
	where hostguid=@hostguid

	declare @totalPages int=0

	declare @randomText nvarchar(50)=replace(cast(newid() as nvarchar(50)), '-', '')

	declare @browseList as api.browselist
	declare @browseRows as api.browsefieldlist
	declare @browseFields as api.browsefields

	--if @typecode='C' begin

		declare @fieldkey nvarchar(50)
		select @fieldkey=colkey
		from modl a
			inner join modlcolm b on a.moduleguid=b.moduleguid
		where a.moduleid=@code 
			and colorder=(
				select min(colorder)
				from modl a
					inner join modlcolm b on a.moduleguid=b.moduleguid
				where a.moduleid=@code 
			)

		--fieldGUID
		--tidak perlu pakai accountid, karena table core tidak semuanya ada accountid. mungkin perlu tambahkan @db
		declare @statusStr nvarchar(max)='', @fieldIsDeleted bit=0
		exec gen.checkIsDeleted @accountid, @dbcore, @code, @fieldIsDeleted output

		if @stateid=999 and @fieldIsDeleted=1 set @statusStr='and isdeleted=1 '
		if @stateid<>999 and @fieldIsDeleted=1 set @statusStr='and isnull(isdeleted,0)=0 '
		if @stateid=999 and @fieldIsDeleted=0 set @statusStr='and 1=0 '

		set @sqlstr=N'
			select b.columnGUID, a.moduleguid, colOrder, b.colkey, case when c4.infovalue>0 then 1 else 0 end, c5.infovalue, b.titleCaption, c2.infoValue, c1.infovalue  
			--select *
			from modl a
				inner join modlcolm b on a.moduleguid=b.moduleguid
				left join modlcolminfo c1 on b.columnguid=c1.columnguid and c1.infokey=''BrowseColWidth''
				left join modlcolminfo c2 on b.columnguid=c2.columnguid and c2.infokey=''BrowseColAlign''
				left join modlcolminfo c3 on b.columnguid=c3.columnguid and c3.infokey=''BrowseColDigit''
				left join modlcolminfo c4 on b.columnguid=c4.columnguid and c4.infokey=''PrimaryCol''
				--left join modlcolminfo c6 on b.columnguid=c6.columnguid and c6.infokey=''BrowseColWidth''
				inner join modlcolminfo c5 on b.columnguid=c5.columnguid and c5.infokey=''isBrowsable'' and c5.infovalue=''1''
			where a.moduleid='''+@code+''''

		if @isdebug=1 print @sqlstr
		insert into @browseFields (columnGUID, moduleGUID, colOrder, colKey, isMandatory, isBrowsable, titleCaption, align, width)
		exec sp_executesql @sqlstr

		--rows
		declare @fieldList nvarchar(max), @fieldList2 nvarchar(max), @fieldlist3 nvarchar(max),
			@ComboList nvarchar(max), @comboFields nvarchar(max)
		declare @searchList nvarchar(max)=''

		set @fieldList=stuff((
			select ', '+colkey
			from modl a
				inner join modlcolm b on a.moduleguid=b.moduleguid
			where moduleid=@code and colKey not in (@fieldkey, 'accountguid')
			for xml path('')),1,2, '')

		set @fieldList2=stuff((
			--select ', isnull(cast('+colkey+' as nvarchar(max)),'''') '+colkey --cast(menuid as nvarchar(max)) menuid
			--tidak boleh empty space, harus null
			select ', cast(a.'+colkey+' as nvarchar(max)) '+colkey --cast(menuid as nvarchar(max)) menuid
			from modl a
				inner join modlcolm b on a.moduleguid=b.moduleguid
			where moduleid=@code and colKey not in (@fieldkey, 'accountguid')
			for xml path('')),1,2, '')

		set @fieldList3=stuff((
			select ', isnull(cast(a.'+colkey+iif(coltype.infovalue='32','_name','')+' as nvarchar(max)),'''') '+colkey 
			from modl  a
				inner join modlcolm b on a.moduleguid=b.moduleguid
				left join modlcolminfo coltype on b.ColumnGUID=coltype.ColumnGUID and coltype.InfoKey='coltype'
			where moduleid=@code and colKey not in (@fieldkey, 'accountguid')
			for xml path('')),1,2, '')

		if isnull(@searchText,'')<>'' begin
			set @searchList=stuff((
				select 'or a.'+colkey+' like ''%'+replace(@searchText, '', '%')+'%'''
				from modl  a
					inner join modlcolm b on a.moduleguid=b.moduleguid
				where moduleid=@code and colKey not in (@fieldkey, 'accountguid')
				for xml path('')),1,3, '')
			set @searchList='and ('+@searchList+')'
		end

		--set @comboList=stuff((
		--	select ' left join '+combotable.infovalue+' '+b.colkey+'_table'+' on a.'+b.colkey+'='+b.colkey+'_table.'+combofieldkey.infovalue+''
		--	--select * 
		--	from modl a
		--		inner join modlcolm b on a.moduleguid=b.moduleguid
		--		inner join modlcolminfo coltype on b.ColumnGUID=coltype.ColumnGUID and coltype.InfoKey='coltype' and coltype.infovalue=32	
		--		inner join modlcolminfo combotable on b.ColumnGUID=combotable.ColumnGUID and combotable.InfoKey='combotable' 
		--		inner join modlcolminfo combofieldkey on b.ColumnGUID=combofieldkey.ColumnGUID and combofieldkey.InfoKey='combofieldkey' 	
		--	where moduleid=@code and colKey not in (@fieldkey, 'accountguid')
		--	for xml path('')),1,1, '')

		set @comboFields=(
			select ', '+b.colkey+'cbid'+iif(isnull(b.colkey+'cbnm','')='','','+'' - ''+'+b.colkey+'cbnm')+' '+b.colkey+'_name'
			--select * 
			from modl a
				inner join modlcolm b on a.moduleguid=b.moduleguid
				inner join modlcolminfo coltype on b.ColumnGUID=coltype.ColumnGUID and coltype.InfoKey='coltype' and coltype.infovalue='32'	
				inner join modlcolminfo combotable on b.ColumnGUID=combotable.ColumnGUID and combotable.InfoKey='combotable'
				inner join modlcolminfo combofieldkey on b.ColumnGUID=combofieldkey.ColumnGUID and combofieldkey.InfoKey='combofieldkey' 	
				inner join modlcolminfo combofieldid on b.ColumnGUID=combofieldid.ColumnGUID and combofieldid.InfoKey='combofieldid' 	
				left join modlcolminfo combofieldname on b.ColumnGUID=combofieldname.ColumnGUID and combofieldname.InfoKey='combofieldname'
			where moduleid=@code and colKey not in (@fieldkey, 'accountguid')
			for xml path(''))

		declare @totalRows int
		
		declare @needStatus bit=0
		if @typecode='T' set @needStatus=1
		--if exists(select * from modl where ModuleID=@code and @typecode='T' and parentmoduleguid is null) 
		--begin
		--end

		set @sqlstr=N'
			select @TotalRows = count(*) from '+@db+'.oph.['+@tblCode+'] a
			where 1=1 '+case when @needstatus = 1 then ''+@setstatus+'' else '' end+@statusStr+@sqlfilter+@searchList+'

			select RN, '+@fieldkey+', '+@fieldList2+isnull(@comboFields,'')+'
			into ##browserows'+@randomText+'
			from '+@db+'.oph.['+@tblCode+'] a
				inner join (
					select formGUID, RN 
					from (	
						select row_number() over(order by '+@sortOrder+' updatedDate desc) RN, '+@fieldkey+' formguid 
						from '+@db+'.oph.['+@tblCode+'] a where 1=1 '+case when @needstatus = 1 then ''+@setstatus+'' else '' end+@statusStr+@sqlfilter+@searchList+') x
					where RN>'+convert(nvarchar(max), (@pgNo-1)*@nbRows)+' 
						and RN<='+convert(nvarchar(max),((@pgNo-1)*@nbRows)+@nbRows)+') y
					on a.'+@fieldkey+'=y.formGUID
			
			select '+@fieldkey+' formGUID, '''+@code+''' moduleid, '+case when @needStatus=1 then 'Status, b.statename StatusLabel, StatusComment' else ''''' Status ,'''' StatusLabel ,'''' StatusComment' end+'
			from ##browserows'+@randomText+' a
				inner join modl c
					on c.moduleid='''+@code+'''			
				'+case when @needstatus = 1 then '
				left join mstastat b
					on b.modulestatusguid=c.modulestatusguid and b.stateid=a.status' else '' end +'
			where 1=1 '+case when @needstatus = 1 then ''+@setstatus+'' else '' end +'
			order by RN'

		if @isdebug=1 print @sqlstr
		insert into @browseList (formGUID, moduleid, status, statusLabel, statusComment)
		exec sp_executesql @sqlstr, N'@TotalRows int output', @TotalRows output

		set @sqlstr='
			SELECT newid(), '+@fieldkey+' formGUID, fextkey, fextstring, 0 mandatory, null titlecaption
			FROM
			(	select '+@fieldkey+', '+@fieldList3+' 
			from ##browserows'+@randomText+' a'+
				') t
			UNPIVOT
			(	fextstring FOR fextkey  IN ('+@fieldList+')
			) AS x'
		
		if @isdebug=1 print @sqlstr
		insert into @browseRows (formFieldGUID, formGUID, formkey, formvalue, mandatory, caption)
		exec sp_executesql @sqlstr

		if @isdebug=1 print 'delete'
		delete x
		--select x.*, c1.infovalue 
		from @browseRows x
			inner join modlcolm a on x.formkey=a.colKey
			inner join modl b on a.ModuleGUID=b.ModuleGUID
			left join modlcolminfo c1 on c1.ColumnGUID=a.ColumnGUID and c1.InfoKey='isBrowsable'
		where b.moduleid=@code and isnull(c1.infovalue,'')<>'1'

		update x
		set Mandatory=case when c1.InfoValue>0 then 1 else 0 end, caption=a.titlecaption
		from @browseRows x
			inner join modlcolm a on x.formkey=a.colKey
			inner join modl b on a.ModuleGUID=b.ModuleGUID
			left join modlcolminfo c1 on c1.ColumnGUID=a.ColumnGUID and c1.InfoKey='PrimaryCol'
		where b.moduleid=@code

		insert into @browseRows (formFieldGUID, formGUID, formkey, formvalue, mandatory, caption)
		select newid(), a.formGUID, 'titlecaption', null, a.mandatory, a.caption
		from @browseRows a
			left join @browseRows b 
				on a.formGUID=b.formGUID and b.formkey='titlecaption'
		where a.formkey='colkey' and b.formguid is null
		order by formguid
	--end 
	--else begin
	--	print 'docm'
	--	--select b.formGUID, b.fextKey, b.fextString, 0 mandatory
	--	--into #browsefields
	--	--from oph_modules.dbo.oph_form a
	--	--	inner join oph_modules.dbo.oph_formfext b
	--	--		on a.formGUID=b.formGUID
	--	--where moduleid=@code
	--end

		--select a.moduleGUID, a.docGUID
		----into #browserows
		--from oph_core.dbo.docm a
		--where moduleguid = (
		--	select moduleguid from modl where moduleid=@code)

	if @isdebug=1 select * from @browseList
	if @isdebug=1 select * from @browsefields
	if @isdebug=1 select * from @browseRows --where formKey='fasrefno'

	declare @browsexml xml
	select @browsexml = 
		--info
		--<info>
		--  <code>VEND</code>
		--  <description>New Vendor Request</description>
		--  <state code="0">DRAFT</state>
		--  <searchText />
		--  <nbRows>10</nbRows>
		--  <pageNo>1</pageNo>
		--  <nbPages>1</nbPages>
		(select (select moduleid code, ModuleDescription description, --@searchText searchText, @pgNo pageNo, @nbRows nbRows, @totalPages nbPages,
		--permission
		--  <permission>
		--	<allowAdd>1</allowAdd>
		--	<allowEdit>1</allowEdit>
		--	<allowDelete>1</allowDelete>
		--	<allowWipe>1</allowWipe>
		--	<allowArchieve>1</allowArchieve>
		--	<allowBatchInsert>1</allowBatchInsert>
		--  </permission>
			(select 
				(@allowadd) allowAdd,
				(@allowBrowse) allowBrowse, 
				(@allowDelete) allowDelete, 
				(@allowEdit) allowEdit, 
				(@allowForce) allowForce, 
				(@allowWipe) allowWipe,
				@fieldIsDeleted 'AllowOnOff'
			for xml path('permission'),type), 
		--states
		--  <states>
		--	<state code="100" name="Pending">
		--	  <substates>
		--		<substate code="0">Draft</substate>
		--		<substate code="100">On Approval</substate>
		--		<substate code="300">Rejected</substate>
		--		<substate code="399">Pending Release</substate>
		--	  </substates>
		--	</state>
		--	<state code="400" name="Approved">
		--	  <substates>
		--		<substate code="400">Approved</substate>
		--	  </substates>
		--	</state>
		--	<state code="500" name="Closed">
		--	  <substates>
		--		<substate code="500">Closed</substate>
		--	  </substates>
		--	</state>
		--	<state code="999" name="Deleted">
		--	  <substates>
		--		<substate code="999">Deleted</substate>
		--	  </substates>
		--	</state>
		--  </states>
			(
				select top 100 stata.statecode as '@code',statedesc as '@name',(
					select top 100 stateid as '@code',statename+''  
					--select * 
					from mstastat statb
					where StateCode = stata.StateCode	
						and modl.ModuleStatusGUID=statb.moduleStatusguid 
					order by stateid
					for xml path('substate'),type)  
				from (
					select distinct statecode, modulestatusguid, statedesc 
					from mstastat 
					where modl.moduleStatusguid=mstastat.moduleStatusguid
					) as stata
				order by statecode
				for xml path('state'),type
			) as states,
			isnull(@nbRows,0) nbRows,
			isnull(@pgNo,0) pageNo,
			isnull((@totalrows/@nbrows) + case when @totalrows % @nbrows >0 then 1 else 0 end,0) as nbPages,
			@TotalRows as TotalRows,
			(	select c.StateCode '@stateCode', c.StateDesc '@stateName', c.StateID '@substateCode', c.StateName '@substateName'
				from modl a
					inner join mstastat c on a.modulestatusguid=c.modulestatusguid
				where moduleid=@code and c.stateid=isNULL(@PARNSTATE, @stateid)
				for xml path('curState'), type) 
		from modl
		where moduleid=@code
		for xml path(''), elements, type
			) info, 
		--</info>
		--columns
		--<columns>
		--  <column fieldName="DocNo" mandatory="1" width="80">Doc No</column>
		--  <column fieldName="RefNo" mandatory="1" width="80">Ref No</column>
		--  <column fieldName="DocDate" mandatory="1" width="80">Date</column>
		--  <column fieldName="VendorNo" mandatory="0">Vendor No</column>
		--  <column fieldName="VendorName" mandatory="0">Vendor Name</column>
		--  <column fieldName="PurposeDescription" mandatory="0">Purpose Description</column>
		--  <column fieldName="docStatus" mandatory="0" docStatus="1" width="80" text-align="center">Status</column>
		--</columns>
		(select top 1000 fieldName '@fieldName', mandatory '@mandatory', width '@width', titleCaption
		from (
			--select 'DocNo' fieldName, 1 mandatory, 80 width,-3 colOrder, 'Doc No' titleCaption union all
			--select 'RefNo', 1, 80, -2, 'Ref No' union all
			--select 'DocDate', 1, 80, 1, 'Date' union all
			select colkey fieldName, ismandatory mandatory, width, colOrder, titleCaption
			from @browsefields) x
		order by colOrder, fieldName
		for xml path('column'), elements, type) header, 
		--rows
		--<rows>
		--  <row code="VEND" GUID="CF549076-2773-4FF8-8129-230B6263479C" edit="1" delete="1" wipe="0" restore="0" force="0" reopen="0" approve="0" reject="0">
		--    <fields>
		--	    <field caption="Doc No" mandatory="1">VQ10B0017</field>
		--	    <field caption="Ref No" mandatory="1">VQ10B0007</field>
		--	    <field caption="Doc Date" mandatory="1">01/01/2015</field>
		--	    <field caption="Vendor No">VENDORID</field>
		--	    <field caption="Vendor Name">PT VENDOR NAME</field>
		--	    <field caption="Purpose Description">THIS IS COMMENT</field>
		--    </fields>
		--	  <docStatus labelColor="success" title="RELEASE">Open/Draft. You cannot generate any Vendor since you don''t have any approval level above you. Please make sure y</docStatus>
		--	  <approvals>
		--      <approval></approval>
		--    </approvals>
		--	  <talks>
		--	    <talk GUID="555209CB-E2E4-47C1-8B09-4025D8DE2349">
		--		  <Message>88</Message>
		--		  <userid>Sam</userid>
		--		  <username>samuel</username>
		--		  <sentdate>05 Dec 2016</sentdate>
		--	    </talk>
		--	    <talk GUID="EF39B46F-4A5F-425D-AF8B-E6C80C39B765">
		--		  <Message>0000</Message>
		--		  <userid>Sam</userid>
		--		  <username>samuel</username>
		--		  <sentdate>05 Dec 2016</sentdate>
		--	    </talk>
		--	  </talks>
		--  </row>
		--</rows>
		(select moduleid '@code', formGUID '@GUID', 
			gen.getAuth(@code, @hostguid, 'edit') '@edit', 
			gen.getAuth(@code, @hostguid, 'delete') '@delete', 
			gen.getAuth(@code, @hostguid, 'wipe') '@wipe', 
			gen.getAuth(@code, @hostguid, 'force') '@force', 
			--gen.getAuth(@code, @hostguid, 'add') '@add', 
			@fieldIsDeleted '@onOff',
			(select y.caption '@title',  y.formkey '@caption', y.mandatory '@mandatory', isnull(y.formValue,'')+'' 
			from @browserows y
				inner join @browsefields z on y.formkey=z.colkey
			where y.formGUID=x.formGUID
			order by z.colorder, y.formkey
			for xml path('field'), elements, type) fields,
			--<docStatus labelColor="success" title="RELEASE">Open/Draft. You cannot generate any Vendor since you don't have any approval level above you. Please make sure y</docStatus>
			(select case status when 0 then 'info' when 100 then 'warning' when 300 then 'danger' when 400 then 'success' when 500 then 'info' end '@labelColor', 
				statusLabel '@title',
				statusComment+'' 
			from @browselist y
			where y.formGUID=x.formGUID
			for xml path('docStatus'), elements, type), 
		--	  <approvals>
		--      <approval></approval>
		--    </approvals>
			'' approvals,	
			'' talks
		from @browselist x
		for xml path('row'), elements, type) content
		for xml path(''), elements, type)

	--select @browsexml


	select (
		select (
			--info
			select (
				--account
				select @accountid account 
				) account, 
				--themeFolder
				(select @theme) 'themeFolder',
				--title
				(	select ModuleDescription 
					from modl a
					where moduleid=@code) title, 
				--code
				(	select moduleid id, ModuleDescription name, @typecode settingMode
					from modl  a
					where moduleid=@code for xml path(''), elements, type) code, 
				--user
				(select userId, userName, '' userURL, hostGUID 
				from userhost a
					inner join [user] b
						on a.userguid=b.userguid
				where hostguid=@hostGUID
				for xml path(''), elements, type) [user]	 
			for xml path(''), elements, type
			) info, 
			--menus
			(select menucode '@code', 
				--submenus
				(select [type] '@type', Tag '@tag', SubMenuDescription [MenuDescription],  caption,  url pageURL, icon_fa fa, icon_url icon_url, 
					--submenus
					(select [type] '@type', Tag '@tag', SubMenuDescription [MenuDescription], caption,  url pageURL, icon_fa fa, icon_url icon_url,
						--submenus
						(select [type] '@type', Tag '@tag', SubMenuDescription [MenuDescription], caption,  url pageURL, icon_fa fa, icon_url icon_url
						from menusmnu d
						where d.uppersubmenuGUID=c.MenudetailGUID and gen.getMenuAuth(url, @hostguid)=1
						order by d.OrderNo, d.caption
						for xml path('submenu'), elements, type) submenus
					from menusmnu c
					where c.uppersubmenuGUID=b.MenudetailGUID and gen.getMenuAuth(url, @hostguid)=1
						--show parent only if there are children
						and (exists(
							select * from menusmnu d
							where d.uppersubmenuGUID=c.MenudetailGUID and gen.getMenuAuth(url, @hostguid)=1
						) or isnull(c.url,'#')<>'#')
					order by c.OrderNo, c.caption
					for xml path('submenu'), elements, type) submenus
				from menusmnu b
				where b.menuGUID=a.MenuGUID and b.upperSubmenuGUID is null
					and (exists(
						select * from menusmnu c
							left join menusmnu d on d.upperSubmenuGUID=c.MenuDetailGUID
						where c.uppersubmenuGUID=b.MenudetailGUID 
							and gen.getMenuAuth(c.url, @hostguid)=1
							and gen.getMenuAuth(isnull(d.url,'#'), @hostguid)=1
					) or isnull(b.url,'#')<>'#')
				order by OrderNo, b.caption
				for xml path('submenu'), elements, type) submenus
			from menu a
			--order by OrderNo asc
			for xml path('menu'), elements, type) menus
		for xml path(''), elements, type
		) header,
		(select '' dashboard, @browsexml [browse], '' form
		for xml path('bodyContent'), elements, type) body,
		'' footer
	for xml path('sqroot')


