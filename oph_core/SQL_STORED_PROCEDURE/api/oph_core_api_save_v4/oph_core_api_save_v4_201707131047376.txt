CREATE procedure [api].[save_v4] 
	@hostGUID uniqueidentifier, @code varchar(20), @GUID uniqueidentifier, @saveXML xml, @preview int=0, @isDebug bit=0
--WITH ENCRYPTION
as	
--declare 
--	@hostGUID uniqueidentifier = gen.gethost('ap\edrick.leonardo'), @code varchar(20) = 'modlappr', 
--	@GUID uniqueidentifier = '00000000-0000-0000-0000-000000000000', @saveXML xml = '<sqroot><field id="q"><value>,</value></field><field id="cid"><value>D97CBF96-6851-4DD7-8D34-23E0430186A8</value></field><field id="modlrequiredname"><value></value></field><field id="modlrequiredtblvalue"><value></value></field><field id="ModuleID"><value>ugrp</value></field><field id="ModuleDescription"><value>User Group</value></field><field id="settingMode"><value>0</value></field><field id="ParentModuleGUID"><value></value></field><field id="needLogin"><value>1</value></field><field id="cbneedLogin"><value>1</value></field><field id="ThemePageGUID"><value>810CA324-734C-4DAB-922E-BFCDBB57E7C4</value></field><field id="ModuleStatusGUID"><value>C934A8C5-D890-491E-B878-9866F4492DD4</value></field><field id="ModuleGroupGUID"><value>B529611D-0D03-496F-A297-51311BDB96A3</value></field><field id="ApprovalGroupGUID"><value>A2D1B599-E149-4650-9E37-03463E0901AA</value></field><field id="UpperGroupGUID"><value></value></field><field id="Lvl"><value>0</value></field><field id="SQLfilter"><value></value></field><field id="ZoneGroup"><value>A</value></field></sqroot>'
--	, @preview int=0, @isDebug bit=1


	SET NOCOUNT ON
	declare @ver varchar(10), @db varchar(50), @typecode varchar(1), @accountid varchar(50), @coreDB varchar(50)

	exec gen.getDBInfo @hostguid, @code, @ver output, @db output, @typecode output, 
		@accountid=@accountid output, @coreDB=@coreDB output

	declare @PrimaryKey nvarchar(50), @sqlstr nvarchar(max), 
		@insertStr nvarchar(max), @insertField nvarchar(max),
		@updateStr nvarchar(max), @colKey nvarchar(max), @msg varchar(MAX)
	declare @cid uniqueidentifier, @parentKey nvarchar(50)

	--check parent
	set @sqlstr='
		select @parentKey=colkey 
		from modl a
			inner join modl b on a.parentmoduleguid=b.moduleguid
			inner join modlcolm c on b.moduleguid=c.moduleguid and c.colorder=1
		where a.moduleid='''+@code+'''
	'
	exec sp_executesql @sqlstr, N'@parentKey nvarchar(50) OUTPUT', @parentKey OUTPUT

	select @cid=typenode.value('value[1]', 'varchar(MAX)')
	from @saveXML.nodes('/sqroot/field') AS XTbl(typenode)
	where typenode.value('@id', 'varchar(50)')='cid'
	--
	
	--set @PrimaryKey = api.fn_PrimaryKey (@code)
	exec api.getPrimaryKey @hostguid, @code, @PrimaryKey OUTPUT
	declare @isNew bit=iif(ISNULL(@GUID, gen.ZeroGUID()) = gen.ZeroGUID(),1,0)

	set @colKey = STUFF((
		select ','+ColKey 
		--select *
		from modlcolm a
			inner join modlcolminfo b ON a.ColumnGUID = b.ColumnGUID
			inner join modl c ON a.ModuleGUID = c.ModuleGUID
		where c.ModuleId = @code 
			and b.InfoKey = 'isEditable' and (b.infoValue = '1' or (@isNew=1 and b.infoValue = '2'))
		order by colkey
		for xml path('')), 1, 1, '')

	declare @codex nvarchar(100)=gen.codex(@hostguid, @code, 1)		
	
	if @typecode='C' begin
		set @insertField = STUFF((
			select ', '+col+'' 
			from (
				select top 1000
					typenode.value('@id', 'varchar(50)') col
				from @saveXML.nodes('/sqroot/field') AS XTbl(typenode)
				where charindex(typenode.value('@id', 'varchar(50)')+',', @colKey+',')>=1
				order by typenode.value('@id', 'varchar(50)')
			) x
			for xml path('')), 1, 2, ''
		)
		set @updateStr = STUFF((
			select ', '+col +' = '''+ val +''''
			from (
				select top 1000 typenode.value('@id', 'varchar(50)') col, replace(typenode.value('value[1]', 'varchar(MAX)'),'''','''''') val
				from @saveXML.nodes('/sqroot/field') AS XTbl(typenode)
				where @colKey+',' like '%' + typenode.value('@id', 'varchar(50)') + ',' + '%'
				order by typenode.value('@id', 'varchar(50)')
			) x
			for xml path('')), 1, 2, ''
		)
	end
	else begin
		set @insertField = STUFF((
			select ', ['+replace(cast(ColumnGUID as nvarchar(50)), '-', '')+']' 
			from (
				select top 1000 
					typenode.value('@id', 'varchar(50)') col
				from @saveXML.nodes('/sqroot/field') AS XTbl(typenode)
				where charindex(typenode.value('@id', 'varchar(50)'), @colKey)>=1
				order by typenode.value('@id', 'varchar(50)')
			) x
				inner join modlcolm y on x.col=y.colkey
				inner join modl z on y.ModuleGUID=z.moduleguid and z.moduleid=@code
			for xml path('')), 1, 2, ''
		)

		set @updateStr = STUFF((
			select ', ['+replace(cast(ColumnGUID as nvarchar(50)), '-', '') +'] = '''+ val +''''
			from (
				select top 1000 typenode.value('@id', 'varchar(50)') col, replace(typenode.value('value[1]', 'varchar(MAX)'),'''','''''') val
				from @saveXML.nodes('/sqroot/field') AS XTbl(typenode)
				where @colKey like '%' + typenode.value('@id', 'varchar(50)') + '%'
				order by typenode.value('@id', 'varchar(50)')
			) x	
				inner join modlcolm y on x.col=y.colkey
				inner join modl z on y.ModuleGUID=z.moduleguid and z.moduleid=@code
			for xml path('')), 1, 2, ''
		)
	end

	set @insertStr = STUFF((
		select
			', '''+ replace(typenode.value('value[1]', 'varchar(MAX)'),'''','''''') +''''
		from @saveXML.nodes('/sqroot/field') AS XTbl(typenode)
		where charindex(typenode.value('@id', 'varchar(50)')+',', @colKey+',')>=1
		order by typenode.value('@id', 'varchar(50)')
		for xml path('')), 1, 2, ''
	)
	set @insertStr=replace(@insertStr, '''''', 'null')

	if @isNew=1 begin
		--'SQL Query Insert' + char(10) + '================'
		set @GUID=NEWID()
		set @sqlstr = 'insert into ' + @codex + ' (' + @PrimaryKey + iif(isnull(@parentKey,'')='','', ', '+@parentKey) + ',' + @insertField + ')' + char(10) +
			'values(''' + cast(@GUID as varchar(50)) + '''' + iif(isnull(@parentKey,'')='','', ', '''+cast(@cid as varchar(50))+'''') + ',' + @insertStr + ')'
	end
	else begin
		--'SQL Query Update' + char(10) + '================'
		
		set @updateStr=replace(@updateStr, '''''', 'null')

		set @sqlstr = 'update ' + @codex + ' set ' + @updateStr + ' where ' + @PrimaryKey + ' = ''' + CAST(@GUID as varchar(50)) + ''''
	end

	--run the scripts
	if @preview=0 begin
		begin try
			if @isdebug=1 print @sqlstr
			exec(@sqlstr)
		end try
		begin catch
			set @msg = ERROR_MESSAGE()
			set @guid = null
		end catch
	end

	select @msg 'message', @GUID 'guid' for xml path('sqroot')

