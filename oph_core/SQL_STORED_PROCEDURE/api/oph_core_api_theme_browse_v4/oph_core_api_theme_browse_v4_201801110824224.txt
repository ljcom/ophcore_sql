CREATE procedure [api].[theme_browse_v4] 
	@hostGUID uniqueidentifier,
	@code varchar(100), 
	@sqlFilter varchar(max)='', 
	@searchText varchar(max)='', 
	@pgNo int=1, 
	@nbRows int=10,
	@sortOrder varchar(max)='', 
	@stateid varchar(10)=null, 
	@isdebug int=0
--WITH ENCRYPTION
as

	--declare @hostGUID uniqueidentifier = gen.gethost('sam'), @code varchar(100) = 'kkel', 
	--@sqlFilter varchar(max)='', @searchText varchar(max)='', 
	--@pgNo int=1, @nbRows int=10, @sortOrder varchar(max)='', @stateid varchar(10)='', @isdebug int=1

	begin try
	
		declare @ver varchar(10), @db varchar(50), @typecode varchar(1), @theme varchar(50), @accountid varchar(50), @coreDB varchar(50)

		exec gen.getDBInfo @hostguid, @code, @ver output, @db output, @typecode output, @theme output,
			@accountid=@accountid output, @coreDB=@coreDB output

		declare @codex nvarchar(300)
		exec gen.getCodex @hostguid, @code, 0, @codex output

		declare @sqlstr nvarchar(max)

		if OBJECT_ID('tempdb..#cbFilter') is Not NULL drop table #cbFilter
		create table #cbFilter(colKey varchar(50), colValue varchar(50))

		if @sqlfilter !='' begin
			set @sqlstr = 'select ' + REPLACE(@sqlFilter, ' and ', char(10) + 'UNION' + char(10) + 'select ')
			set @sqlstr = REPLACE(@sqlstr, '=', ''' ,')
			set @sqlstr = REPLACE(@sqlstr, ' ''', '''')
			set @sqlstr = REPLACE(@sqlstr, ''' ', '''')
			set @sqlstr = REPLACE(@sqlstr, 'select ', 'select ''')

			insert into #cbFilter
			exec(@sqlstr)

			set @sqlfilter = replace(@sqlfilter, 'CreatedUserDelegation', 'Createduser')
			set @sqlFilter = 'and ' +@sqlfilter
		end

		if isnull(@sortOrder,'')<>''
			set @sortorder=@sortorder+', '
		else
			select @sortorder=b.infovalue+', ' 
			from modl a
				inner join modlinfo b on a.moduleguid=b.moduleguid and b.infokey='orderField'
			where a.moduleid=@code

		declare @browseMode nvarchar(10)
		select @browseMode=b.infovalue
			from modl a
				inner join modlinfo b on a.moduleguid=b.moduleguid and b.infokey='browseMode'
			where a.moduleid=@code

		--get authorization
		declare --@code nvarchar(10)='tafass', @HostGUID uniqueidentifier='A301DDF2-763B-42C3-BB8C-799091ADB6FD', 
		@allowadd bit, @allowAccess bit, @allowEdit bit, @allowDelete bit, @allowWipe bit, @allowForce bit, @allowExport bit

		--exec gen.verifyAuth @code, @HostGUID, 
		--	@allowadd output, @allowBrowse output, @allowEdit output, @allowDelete output, @allowWipe output, @allowForce output, @allowExport output

		select @allowadd=allowadd, @allowAccess=allowAccess, @allowEdit=allowEdit, @allowDelete=allowDelete, @allowWipe=allowWipe, 
			@allowForce=allowForce, @allowExport=allowExport
		from gen.authmodl(@hostguid, null)
		where moduleid=@code

		--get parent 
		--Stateid for detail
		declare --@PARNMODLGUID uniqueidentifier, @PARNCODE varchar(20), 
			@PARNSTATE varchar(5)--, @parentTypeCode varchar(1) 
	
		--select @PARNMODLGUID = ParentModuleGUID 
		--from modl a
		--where ModuleID = @code 

		--if @PARNMODLGUID is NOT NULL begin
		--	select @parncode=@infovalue 
		--	from modl m inner join modlinfo i on m.moduleguid=i.moduleguid 
		--	where moduleid=@code and i.infokey='childKey'

		--	if @parncode is null
		--		select @PARNCODE = ModuleID from modl where ModuleGUID = @PARNMODLGUID

		--	--exec gen.getDBInfo @hostguid, @PARNCODE, @moduletype= @parentTypeCode output
		--	print @PARNCODE 
		--	--set @sqlstr = 'select @stats=cast([Status] as varchar(5)) from '+@code+' where 1=1 '+@sqlFilter
		--	--exec sp_executesql @sqlstr, N'@stats varchar(5) OUTPUT', @stats = @PARNSTATE OUTPUT
		--	--print 'Parent State: '+@PARNSTATE
		--end

		declare @setstatus nvarchar(100)=''
		if @typecode<>'C' and @typecode<>'B' begin
			if ISNUMERIC(@stateid)= 0 OR @stateid is null begin
				set @stateid = null
				set @setstatus = 'and status is not null '
			end
			else if @stateid=999 begin
				set @setstatus = ''
			end
			else begin
				set @setstatus = 'and status ='+@stateid+' '
			end

			if @stateid is null
			begin
				set @stateid=(
					select top 1 c.StateID
					from modl a
						inner join mstastat c on c.modulestatusguid=a.ModuleStatusGUID
					where a.ModuleID=@code 
					order by isDefault desc)
			end
		end

		--set userGUID and accountGUID
		declare @userGUID uniqueidentifier

		select @userGUID=a.userGUID--, @accountGUID=b.accountGUID, @accountid=AccountId
		from userhost a 
			inner join [user] b on a.userguid=b.userguid
		where hostguid=@hostguid

		declare @totalPages int=0

		declare @randomText varchar(50)=replace(cast(newid() as varchar(50)), '-', '')

		declare @browseList as TABLE([ordernumber] [int] NULL, [formGUID] [uniqueidentifier] NOT NULL, [moduleid] [varchar](50) NULL, [status] [int] NULL, [statusLabel] [varchar](50) NULL, [statusComment] [nvarchar](max) NULL, CreatedUser uniqueidentifier)
		declare @browseRows as TABLE([formFieldGUID] [uniqueidentifier] NOT NULL, [formGUID] [uniqueidentifier] NULL, [formKey] [nvarchar](300) NULL, [formValue] [nvarchar](max) NULL, [mandatory] [int] NULL, [caption] [nvarchar](max) NULL)
		declare @browseFields as TABLE([columnguid] [uniqueidentifier] NULL, [moduleguid] [uniqueidentifier] NULL, [colOrder] [int] NULL, [colKey] [nvarchar](max) NULL, [isMandatory] [bit] NULL, [isDocStatus] [bit] NULL, [isBrowsable] [bit] NULL, [titleCaption] [nvarchar](max) NULL, [align] [int] NULL,	[width] [int] NULL)
		
		declare @fieldkey varchar(50)
		if @typecode='C' begin
			select @fieldkey=colkey
			from modl a
				inner join modlcolm b on a.moduleguid=b.moduleguid 
					and colorder=(
						select min(colorder)
						from modl a
							inner join modlcolm b on a.moduleguid=b.moduleguid
						where a.moduleid=@code 
					)
				left join modlcolminfo c on c.InfoKey='primaryCol' and c.InfoValue='1' 
			where a.moduleid=@code 
		end
		else if @typecode='B' begin
			set @fieldKey=''
		end
		else begin
			set @fieldkey='docGUID'
		end

		if @typecode <>'B' begin
			--fieldGUID
			--tidak perlu pakai accountid, karena table core tidak semuanya ada accountid. mungkin perlu tambahkan @db
			declare @statusStr nvarchar(max)='', @fieldIsDeleted bit=0
			exec gen.checkIsDeleted @hostguid, @code, @fieldIsDeleted output

			if @stateid=999 and @fieldIsDeleted=1 set @statusStr='and isdeleted=1 '
			if @stateid<>999 and @fieldIsDeleted=1 set @statusStr='and isnull(isdeleted,0)=0 '
			if @stateid=999 and @fieldIsDeleted=0 set @statusStr='and 1=0 '
		end

		--docstatus tidak perlu diaktifkan. automatis aktif jika settingmode='T'
		set @sqlstr='
			select b.columnGUID, a.moduleguid, colOrder, b.colkey, 
				case when PrimaryCol.infovalue>0 then 1 else 0 end, 0 docStatus,
				--case when docStatus.infovalue>0 then 1 else 0 end, 
				c5.infovalue, b.titleCaption, c2.infoValue, c1.infovalue  
			--select *
			from modl a
				inner join modlcolm b on a.moduleguid=b.moduleguid
				left join modlcolminfo c1 on b.columnguid=c1.columnguid and c1.infokey=''colSize''
				left join modlcolminfo c2 on b.columnguid=c2.columnguid and c2.infokey=''BrowseColAlign''
				left join modlcolminfo c3 on b.columnguid=c3.columnguid and c3.infokey=''BrowseColDigit''
				left join modlcolminfo PrimaryCol on b.columnguid=PrimaryCol.columnguid and PrimaryCol.infokey=''PrimaryCol''
				--left join modlcolminfo docStatus on b.columnguid=docStatus.columnguid and docStatus.infokey=''docStatus''
				inner join modlcolminfo c5 on b.columnguid=c5.columnguid and c5.infokey=''isBrowsable'' and c5.infovalue=''1''
			where a.moduleid='''+@code+''''

		if @isdebug=1 select @sqlstr for xml path('')
		insert into @browseFields (columnGUID, moduleGUID, colOrder, colKey, isMandatory, isDocStatus, isBrowsable, titleCaption, align, width)
		exec sp_executesql @sqlstr

		if @typecode <>'B' begin
			declare @totalRows int
	
			--rows
			declare @fieldList varchar(max), @fieldList2 varchar(max), @fieldlist3 varchar(max),
				@ComboList varchar(max), @comboFields varchar(max)
			declare @searchList varchar(max)=''

			set @fieldList=stuff((
				select ', ['+colkey+']'
				from modl a
					inner join modlcolm b on a.moduleguid=b.moduleguid
				where moduleid=@code and colKey not in (@fieldkey, 'accountguid')
				for xml path('')),1,2, '')

			set @fieldList2=stuff((
				select ', cast(a.'+colkey+' as varchar(max)) ['+colkey+']' 
				from modl  a
					inner join modlcolm b on a.moduleguid=b.moduleguid
				where moduleid=@code and colKey not in (@fieldkey, 'accountguid')
				for xml path('')),1,2, '')
			set @fieldList2=@fieldList2+iif(@typecode='T' and charindex('status', @fieldList2)=0, ', status', '')+iif(@typecode='T' and charindex('statusComment', @fieldList2)=0, ', statusComment', '')

			set @fieldList3=stuff((
				select ', isnull(cast(a.['+iif(coltype.infovalue='32',colkey+'_name', colkey)+'] as varchar(max)),'''') ['+colkey+']' 
				from modl  a
					inner join modlcolm b on a.moduleguid=b.moduleguid
					left join modlcolminfo coltype on b.ColumnGUID=coltype.ColumnGUID and coltype.InfoKey='coltype'
					left join modlcolminfo comboTable on b.ColumnGUID=comboTable.ColumnGUID and comboTable.InfoKey='comboTable'
				where moduleid=@code and colKey not in (@fieldkey, 'accountguid')
				for xml path('')),1,2, '')

			if isnull(@searchText,'')<>'' begin
				set @searchList=stuff((
					select 'or a.['+colkey+'] like ''%'+replace(@searchText, '', '%')+'%'''
					from modl  a
						inner join modlcolm b on a.moduleguid=b.moduleguid
					where moduleid=@code and colKey not in (@fieldkey, 'accountguid')
					for xml path('')),1,3, '')
				set @searchList='and ('+@searchList+')'
			end

			set @comboList=stuff((
				select ' left join '+gen.codex(@hostguid, combotable.Infovalue, a.moduleid)+' '+b.colkey+'_table'+' 
					on cast(a.['+b.colkey+'] as nvarchar(50))=cast('+b.colkey+'_table.'+iif(left(comboTable.infovalue, '4')='par(', isnull(combofieldkey.infovalue, 'parameterValueGUID'), isnull(combofieldkey.infovalue,''))+' as nvarchar(50)) 
					'
					--	'+iif(isnull(comboWhereField1.infovalue, '')<>'', 'and '+b.colkey+'_table.'+isnull(comboWhereField1.infovalue,'')+'=a.'+isnull(comboWhereField1.infovalue,''), '')+'
					--	'+iif(isnull(comboWhereField2.infovalue, '')<>'', 'and '+b.colkey+'_table.'+isnull(comboWhereField2.infovalue,'')+'=a.'+isnull(comboWhereField1.infovalue,''), '')+'
					--'
				--select * 
				from modl a
					inner join modlcolm b on a.moduleguid=b.moduleguid
					inner join modlcolminfo coltype on b.ColumnGUID=coltype.ColumnGUID and coltype.InfoKey='coltype' and coltype.infovalue='32'	
					inner join modlcolminfo combotable on b.ColumnGUID=combotable.ColumnGUID and combotable.InfoKey='combotable' and isnull(combotable.Infovalue,'')<>'' 
					left join modlcolminfo combofieldkey on b.ColumnGUID=combofieldkey.ColumnGUID and combofieldkey.InfoKey='combofieldkey' and isnull(combofieldkey.Infovalue, '')<>''
					left join modlcolminfo comboWhereField1 on b.ColumnGUID=comboWhereField1.ColumnGUID and comboWhereField1.InfoKey='comboWhereField1' 
					left join modlcolminfo comboWhereField2 on b.ColumnGUID=comboWhereField2.ColumnGUID and comboWhereField2.InfoKey='comboWhereField2' 
 				where moduleid=@code and colKey not in (@fieldkey, 'accountguid')
				for xml path('')),1,1, '')

			set @comboFields=(
				select 
					case 
						when isnull(combofieldname.infovalue,'')=''
							then ', '+
								'cast('+b.colkey+'_table.'+iif(left(combotable.infovalue, 4)='par(', isnull(combofieldid.infovalue, 'parameterDescription'), combofieldid.infovalue)+' as nvarchar(max))'+' '+b.colkey+'_name'
						else 
							', '+
								'cast('+b.colkey+'_table.'+iif(left(combotable.infovalue, 4)='par(', isnull(combofieldid.infovalue, 'parameterValue'), combofieldid.infovalue)+' as nvarchar(max))'+'+'' - ''+'+ 
								+
								'cast('+b.colkey+'_table.'+iif(left(combotable.infovalue, 4)='par(', isnull(combofieldname.infovalue, 'parameterDescription'), combofieldname.infovalue)+' as nvarchar(max))'+' '+b.colkey+'_name'
					end
					--', CAST('+b.colkey+'_table.'+combofieldid.infovalue+iif(isnull(combofieldname.infovalue,'')='','',' as varchar(MAX))+'' - ''+'+b.colkey+'_table.'+combofieldname.infovalue)+' '+b.colkey+'_name'
				--select * 
				from modl a
					inner join modlcolm b on a.moduleguid=b.moduleguid
					inner join modlcolminfo coltype on b.ColumnGUID=coltype.ColumnGUID and coltype.InfoKey='coltype' and coltype.infovalue='32'	
					inner join modlcolminfo combotable on b.ColumnGUID=combotable.ColumnGUID and combotable.InfoKey='combotable' and isnull(combotable.infovalue, '')<>''
					left join modlcolminfo combofieldkey on b.ColumnGUID=combofieldkey.ColumnGUID and combofieldkey.InfoKey='combofieldkey' 	
					left join modlcolminfo combofieldid on b.ColumnGUID=combofieldid.ColumnGUID and combofieldid.InfoKey='combofieldid' 	
					left join modlcolminfo combofieldname on b.ColumnGUID=combofieldname.ColumnGUID and combofieldname.InfoKey='combofieldname'
				where moduleid=@code and colKey not in (@fieldkey, 'accountguid')
				for xml path(''))
			print @comboFields

			--Special User Group Permission Data 
			--by eLs
			declare @specialUGRP nvarchar(MAX) = STUFF((
				select '*'+a.TokenUGRP from ugrp a
					inner join [user] b ON a.TokenUser like '%'+cast(b.UserGUID as varchar(50))+'%'
					inner join userhost c ON b.UserGUID = c.UserGUID
				where HostGUID = @hostGUID AND TokenUGRP is Not NULL and @code='ugrp'
				for xml path('')), 1, 1, 'AND UGroupGUID in (''')+''')'
			set @specialUGRP = REPLACE(@specialUGRP, '*', ''',''')
			set @specialUGRP = ISNULL(@specialUGRP, '')

			declare @approvalFilter nvarchar(max)
			set @approvalFilter=isnull(--stuff(
				(select ' and '+SQLfilter 
				from [gen].[authUgrp](@hostGUID) a
					inner join modlappr b on a.ugroupGUID=b.ApprovalGroupGUID
					inner join modl c on b.ModuleGUID=c.ModuleGUID
				where c.moduleid=@code
				for xml path('')), '')
					--, 1, 5, '')
			--print @approvalFilter

			--Delegations
			--by eLs
			declare @delegators nvarchar(MAX), @creators nvarchar(MAX)
			if exists(
				select * from modl a
					inner join userdele b ON b.TokenModule like '%' + CAST(a.ModuleGUID as varchar(50)) + '%'
				where ModuleID = @code AND TokenDelegate like '%' + CAST(gen.getUserHost(@hostGUID) as varchar(50)) + '%'
			) begin
				set @delegators = (
					select ', ''' +cast(b.UserGUID as varchar(50))+'''' from modl a
						inner join userdele b ON b.TokenModule like '%' + CAST(a.ModuleGUID as varchar(50)) + '%'
					where ModuleID = @code AND TokenDelegate like '%' + CAST(gen.getUserHost(@hostGUID) as varchar(50)) + '%'
					group by b.UserGUID
					for xml path('')
				)
			end
			set @creators = 'and CreatedUser in ('''+cast(@userGUID as nvarchar(50))+''''+ iif(@delegators is null, '', @delegators) +')'
			set @creators = iif(@typecode != 'T', '', @creators)

			declare @isHostDelegator bit = 0
			if exists(
				select * from modl a
					inner join userdele b ON b.TokenModule like '%' + CAST(a.ModuleGUID as varchar(50)) + '%'
				where ModuleID = @code AND b.UserGUID = gen.getUserHost(@hostGUID)
			) begin
				set @isHostDelegator = 1
			end

			
			if @typecode = 'T' begin
			set @sqlstr=replace('
			set @UserGUID = '''+cast(@UserGUID as nvarchar(50))+''' 
			if OBJECT_ID(''tempdb..#HEAD'+@randomText+''') is Not NULL drop table #HEAD'+@randomText+'
			select a.* into #HEAD'+@randomText+' from '+@codex+' a
				inner join (
					select a.'+@fieldkey+' from doc.'+@code+'APRV a'+
				case 
					when convert(int,@stateid) < 300 then '
						inner join (
							select '+@fieldkey+', min(AprvLevel) minLvl from doc.'+@code+'APRV where isnull(status,0) = 0  group by '+@fieldkey+'
						) b ON a.'+@fieldkey+' = b.'+@fieldkey+' AND a.AprvLevel = minLvl
					' else '' end+'
					where AprvUserGUID = '''+cast(@UserGUID as nvarchar(50))+''' AND a.AprvLevel > 0
					UNION
					select '+@fieldkey+' from doc.'+@code+'APRV 
					where AprvUserGUID = '''+cast(@UserGUID as nvarchar(50))+''' AND AprvLevel = 0
				) b ON a.'+@fieldkey+' = b.'+@fieldkey+' 
			UNION
			select * from '+@codex+' where CreatedUser = '''+cast(@UserGUID as nvarchar(50))+''' 

			select @TotalRows = count(*) from #HEAD'+@randomText+' a where 1=1 '+@approvalFilter+@specialUGRP+@setstatus+@statusStr+@sqlfilter+@searchList+'

			select RN, a.'+@fieldkey+', '+@fieldList2+isnull(@comboFields,'')+iif(@typecode!='t', '', '') + iif(charindex('createduser', @fieldList2)>0, '', ', a.CreatedUser')+'
			into ##browserows'+@randomText+'
			from #HEAD'+@randomText+' a
				'+isnull(@ComboList,'')+'
				inner join (
					select formGUID, RN from (	
						select row_number() over(order by '+@sortOrder+' updatedDate, createddate desc) RN, '+@fieldkey+' formguid 
						from #HEAD'+@randomText+' a where 1=1 '+@approvalFilter+@specialUGRP+@setstatus+@statusStr+@sqlfilter+@searchList+') x
					where RN>'+convert(nvarchar(max), (@pgNo-1)*@nbRows)+' 
						and RN<='+convert(nvarchar(max),((@pgNo-1)*@nbRows)+@nbRows)+') y
					on a.'+@fieldkey+'=y.formGUID


				select '+@fieldkey+' formGUID, '''+@code+''' moduleid, '+
					iif(@typecode='T','Status, b.statename StatusLabel, StatusComment, createduser', 'null Status, null StatusLabel, null StatusComment, null CreatedUser')+'
				from ##browserows'+@randomText+' a'+
				iif(@typeCode='T','
					inner join modl c
						on c.moduleid='''+@code+'''	
					inner join mstastat b
						on b.modulestatusguid=c.modulestatusguid and b.stateid=a.status
				where 1=1 '+@setstatus,'')+'
				order by RN', '&'+'#x0D;', '')
			end 
			else begin
			set @sqlstr=replace('
			select @TotalRows = count(*) from '+@codex+' a where 1=1 '+@approvalFilter+@specialUGRP+@setstatus+@statusStr+@sqlfilter+@searchList+'

			select RN, a.'+@fieldkey+', '+@fieldList2+isnull(@comboFields,'')+'
			into ##browserows'+@randomText+'
			from '+@codex+' a
				'+isnull(@ComboList,'')+'
				inner join (
					select formGUID, RN from (	
						select row_number() over(order by '+@sortOrder+' updatedDate desc) RN, '+@fieldkey+' formguid 
						from '+@codex+' a
						where 1=1 '+@approvalFilter+@specialUGRP+@setstatus+@statusStr+@sqlfilter+@searchList+'
					) x
					where RN > '+convert(nvarchar(max), (@pgNo-1)*@nbRows)+' and RN <= '+convert(nvarchar(max),((@pgNo-1)*@nbRows)+@nbRows)+'
				) y ON a.'+@fieldkey+'=y.formGUID
			

				select '+@fieldkey+' formGUID, '''+@code+''' moduleid, '+
					iif(@typecode='T','Status, b.statename StatusLabel, StatusComment, createduser', 'null Status, null StatusLabel, null StatusComment, null CreatedUser')+'
				from ##browserows'+@randomText+' a'+
				iif(@typeCode='T','
					inner join modl c
						on c.moduleid='''+@code+'''	
					inner join mstastat b
						on b.modulestatusguid=c.modulestatusguid and b.stateid=a.status
				where 1=1 '+@setstatus,'')+'
				order by RN', '&'+'#x0D;', '')
			end

			if @isdebug=1 select @sqlstr for xml path('')
			insert into @browseList (formGUID, moduleid, status, statusLabel, statusComment, CreatedUser)
			exec sp_executesql @sqlstr, N'@TotalRows int output, @userGUID uniqueidentifier OUTPUT', @TotalRows output, @userGUID OUTPUT

			set @sqlstr='
				SELECT newid(), '+@fieldkey+' formGUID, fextkey, fextstring, 0 mandatory, null titlecaption
				FROM
				(	select '+@fieldkey+', '+@fieldList3+'
					from ##browserows'+@randomText+' a'+
					') t
				UNPIVOT
				(	fextstring FOR fextkey  IN ('+@fieldList+')
				) AS x'
		
			if @isdebug=1 select @sqlstr for xml path('')
			insert into @browseRows (formFieldGUID, formGUID, formkey, formvalue, mandatory, caption)
			exec sp_executesql @sqlstr

			if @isdebug=1 print 'delete'
			delete x
			--select x.*, c1.infovalue 
			from @browseRows x
				inner join modlcolm a on x.formkey=a.colKey
				inner join modl b on a.ModuleGUID=b.ModuleGUID
				left join modlcolminfo c1 on c1.ColumnGUID=a.ColumnGUID and c1.InfoKey='isBrowsable'
			where b.moduleid=@code and isnull(c1.infovalue,'')<>'1'

			update x
			set Mandatory=case when c1.InfoValue>0 then 1 else 0 end, caption=a.titlecaption
			from @browseRows x
				inner join modlcolm a on x.formkey=a.colKey
				inner join modl b on a.ModuleGUID=b.ModuleGUID
				left join modlcolminfo c1 on c1.ColumnGUID=a.ColumnGUID and c1.InfoKey='PrimaryCol'
			where b.moduleid=@code

			insert into @browseRows (formFieldGUID, formGUID, formkey, formvalue, mandatory, caption)
			select newid(), a.formGUID, 'titlecaption', null, a.mandatory, a.caption
			from @browseRows a
				left join @browseRows b 
					on a.formGUID=b.formGUID and b.formkey='titlecaption'
			where a.formkey='colkey' and b.formguid is null
			order by formguid
		
			if @isdebug=1 select * from @browseList
			if @isdebug=1 select * from @browsefields
			if @isdebug=1 select * from @browseRows

			declare @aprvTbl as table(formGUID uniqueidentifier, name varchar(100), [level] int, [status] int, [date] varchar(50))
			declare @filterGUID nvarchar(MAX) = STUFF((
				select ','''+cast(formGUID as varchar(50))+'''' from @browseList for xml path('')
			), 1, 1, '')
	
			set @sqlstr = 'select '+@fieldkey+', REPLACE(u.username, ''.'', '' ''), aprvlevel Lvl, isNULL([Status], 0), 
				case Status when 400 then
					case 
						when DATEDIFF(MINUTE, d.UpdatedDate, GETDATE()) between 0 and 59
							then CAST(DATEDIFF(MINUTE, d.UpdatedDate, GETDATE()) as varchar(5)) + '' minutes ago''
						when DATEDIFF(MINUTE, d.UpdatedDate, GETDATE()) between 60 and 1439
							then CAST(DATEDIFF(HOUR, d.UpdatedDate, GETDATE()) as varchar(5)) + '' hours ago''
						when DATEDIFF(HOUR, d.UpdatedDate, GETDATE()) between 24 and 167
							then CAST(DATEDIFF(DAY, d.UpdatedDate, GETDATE()) as varchar(5)) + '' days ago''
						when DATEDIFF(HOUR, d.UpdatedDate, GETDATE()) between 168 and 671
							then CAST(DATEDIFF(WEEK, d.UpdatedDate, GETDATE()) as varchar(5)) + '' weeks ago''
						when DATEDIFF(DAY, d.UpdatedDate, GETDATE()) between 30 and 37
							then CAST(DATEDIFF(MINUTE, d.UpdatedDate, GETDATE()) as varchar(5)) + '' month ago''
						else ''on '' + CONVERT(varchar(22), d.UpdatedDate, 107)
					end
				end 
				from doc.['+@code+'APRV] d
					inner join [user] u on d.aprvuserGUID=u.userGUID
				where '+@fieldkey+' in ('+ @filterGUID +')'

			print @sqlstr
			if @typecode='T' insert into @aprvTbl exec(@sqlstr)
		end

		declare @headerXML xml
		exec [api].[theme_header] @hostguid, @code, @headerXML output

		declare @xmlState xml
		if @typeCode = 't'
			--with Total Record
			exec [api].[theme_state] @hostguid, @code, @typeCode, 1, 'body', @xmlState output
		else 
			--without Total Record
			exec [api].[theme_state] @hostguid, @code, @typeCode, 0, 'body', @xmlState output

		declare @browsexml xml
		select @browsexml = 
			--info
			--<info>
			--  <code>VEND</code>
			--  <description>New Vendor Request</description>
			--  <state code="0">DRAFT</state>
			--  <searchText />
			--  <nbRows>10</nbRows>
			--  <pageNo>1</pageNo>
			--  <nbPages>1</nbPages>
			(select 
				(select moduleid code, ModuleDescription description, @searchText [search],
				IIF(@delegators is NULL, 0, 1) [isDelegated], @isHostDelegator [isDelegator], @browseMode browseMode,
				--@searchText searchText, @pgNo pageNo, @nbRows nbRows, @totalPages nbPages,
				(	
					select id [@id], caption [@caption], value from (
						select 
							 colOrder [orders], a.colKey [id], TitleCaption [caption], c.colValue [value]
						from modlcolm a
							inner join modlcolminfo b ON a.ColumnGUID = b.ColumnGUID AND b.InfoKey like 'comboFilter%'
							left join #cbFilter c ON a.colKey = c.colKey
						where a.ModuleGUID = modl.ModuleGUID AND b.InfoValue = '1' --AND colType = 36
						UNION
						select 1, 'CreatedUserDelegation', 'Delegation Filter User', 
							(select colValue from #cbFilter where colKey = 'CreatedUserDelegation') 
						where @delegators is Not NULL
					) cbFilters where isNULL(id, '') != ''
					order by orders
					for xml path ('comboFilter'), type
				) [filters],
			--permission
			--  <permission>
			--	<allowAdd>1</allowAdd>
			--	<allowEdit>1</allowEdit>
			--	<allowDelete>1</allowDelete>
			--	<allowWipe>1</allowWipe>
			--	<allowArchieve>1</allowArchieve>
			--	<allowBatchInsert>1</allowBatchInsert>
			--  </permission>
				(select
					(@allowadd) allowAdd,
					(@allowAccess) allowAccess,
					(@allowAccess) allowBrowse,
					(@allowDelete) allowDelete, 
					(@allowEdit) allowEdit, 
					(@allowForce) allowForce, 
					(@allowWipe) allowWipe,
					@fieldIsDeleted 'allowOnOff',
					@allowExport 'allowExport'
				for xml path('permission'),type), 
			--new states
				@xmlState [states],
			--oldStates
				--(
				--	select top 100 stata.statecode as '@code',statedesc as '@name',(
				--		select top 100 stateid as '@code',statename+''  
				--		--select * 
				--		from mstastat statb
				--		where StateCode = stata.StateCode	
				--			and modl.ModuleStatusGUID=statb.moduleStatusguid 
				--		order by stateid
				--		for xml path('substate'),type)  
				--	from (
				--		select distinct statecode, modulestatusguid, statedesc 
				--		from mstastat 
				--		where modl.moduleStatusguid=mstastat.moduleStatusguid
				--		) as stata
				--	order by statecode
				--	for xml path('state'),type
				--) as states,
				isnull(@nbRows,0) nbRows,
				isnull(@pgNo,0) pageNo,
				isnull((@totalrows/@nbrows) + case when @totalrows % @nbrows >0 then 1 else 0 end,0) as nbPages,
				@TotalRows as TotalRows,
				(	select c.StateCode '@stateCode', c.StateDesc '@stateName', c.StateID '@substateCode', c.StateName '@substateName'
					from modl a
						inner join mstastat c on a.modulestatusguid=c.modulestatusguid
					where moduleid=@code and c.stateid=isNULL(@PARNSTATE, @stateid)
					for xml path('curState'), type) 
			from modl
			where moduleid=@code
			for xml path(''), elements, type
				) info, 
			--</info>
			--columns
			--<columns>
			--  <column fieldName="DocNo" mandatory="1" width="80">Doc No</column>
			--  <column fieldName="RefNo" mandatory="1" width="80">Ref No</column>
			--  <column fieldName="DocDate" mandatory="1" width="80">Date</column>
			--  <column fieldName="VendorNo" mandatory="0">Vendor No</column>
			--  <column fieldName="VendorName" mandatory="0">Vendor Name</column>
			--  <column fieldName="PurposeDescription" mandatory="0">Purpose Description</column>
			--  <column fieldName="docStatus" mandatory="0" docStatus="1" width="80" text-align="center">Status</column>
			--</columns>
			(select top 1000 fieldname '@fieldName', mandatory '@mandatory', isDocStatus '@docStatus', width '@width', titleCaption
			from (
				--select 'DocNo' fieldName, 1 mandatory, 80 width,-3 colOrder, 'Doc No' titleCaption union all
				--select 'RefNo', 1, 80, -2, 'Ref No' union all
				--select 'DocDate', 1, 80, 1, 'Date' union all
				select colkey fieldName, ismandatory mandatory, isDocStatus, width, colOrder, titleCaption  
				from @browsefields) x
			order by colOrder, fieldname
			for xml path('column'), elements, type) header, 
			--rows
			--<rows>
			--  <row code="VEND" GUID="CF549076-2773-4FF8-8129-230B6263479C" edit="1" delete="1" wipe="0" restore="0" force="0" reopen="0" approve="0" reject="0">
			--    <fields>
			--	    <field caption="Doc No" mandatory="1">VQ10B0017</field>
			--	    <field caption="Ref No" mandatory="1">VQ10B0007</field>
			--	    <field caption="Doc Date" mandatory="1">01/01/2015</field>
			--	    <field caption="Vendor No">VENDORID</field>
			--	    <field caption="Vendor Name">PT VENDOR NAME</field>
			--	    <field caption="Purpose Description">THIS IS COMMENT</field>
			--    </fields>
			--	  <docStatus labelColor="success" title="RELEASE">Open/Draft. You cannot generate any Vendor since you don''t have any approval level above you. Please make sure y</docStatus>
			--	  <approvals>
			--      <approval></approval>
			--    </approvals>
			--	  <talks>
			--	    <talk GUID="555209CB-E2E4-47C1-8B09-4025D8DE2349">
			--		  <Message>88</Message>
			--		  <userid>Sam</userid>
			--		  <username>samuel</username>
			--		  <sentdate>05 Dec 2016</sentdate>
			--	    </talk>
			--	    <talk GUID="EF39B46F-4A5F-425D-AF8B-E6C80C39B765">
			--		  <Message>0000</Message>
			--		  <userid>Sam</userid>
			--		  <username>samuel</username>
			--		  <sentdate>05 Dec 2016</sentdate>
			--	    </talk>
			--	  </talks>
			--  </row>
			--</rows>
			(select moduleid '@code', formGUID '@GUID', 
				@allowedit '@edit', @allowDelete '@delete', @allowWipe '@wipe', @allowForce '@force',
				--gen.getAuth(@code, @hostguid, 'edit') '@edit', 
				--gen.getAuth(@code, @hostguid, 'delete') '@delete', 
				@fieldIsDeleted '@onOff',
				--gen.getAuth(@code, @hostguid, 'wipe') '@wipe', 
				--gen.getAuth(@code, @hostguid, 'force') '@force', 
				--gen.getAuth(@code, @hostguid, 'add') '@add', 
				(select y.caption '@title',  y.formkey '@caption', y.mandatory '@mandatory', y.formValue+'' 
				from @browserows y
					inner join @browsefields z on y.formkey=z.colkey
				where y.formGUID=x.formGUID
				order by z.colorder, y.formkey
				for xml path('field'), elements, type) fields,
				--docDelegate
				(
					select 'primary' [@labelColor], 'Delegated' [@title], 'by ' + userName
					from @browselist y
						inner join [user] u ON y.CreatedUser = u.UserGUID
					where y.formGUID=x.formGUID AND u.UserGUID != gen.getUserHost(@hostGUID) and @delegators is not NULL
					for xml path('docDelegate'), elements, type
				), 
				--<docStatus labelColor="success" title="RELEASE">Open/Draft. You cannot generate any Vendor since you don't have any approval level above you. Please make sure y</docStatus>
				(select case status when 0 then 'info' when 100 then 'warning' when 300 then 'danger' when 400 then 'success' when 500 then 'info' end '@labelColor', 
					statusLabel '@title',
					statusComment+'' 
				from @browselist y
				where y.formGUID=x.formGUID
				for xml path('docStatus'), elements, type), 
				(select [level] [@level], [status] [@status], name, [date] 
					from @aprvTbl t where x.formGUID = t.formGUID order by [level] for xml path('approval'), type
				) approvals,	
				( select comment '@comment', talkDate '@talkDate', 
						case  
							when  CAST(DATEDIFF(HOUR, talkDate, getdate()) AS NVARCHAR(50)) < 1 then CAST(DATEDIFF(MINUTE, talkDate, getdate()) AS NVARCHAR(50)) + ' minute ago'
							when  CAST(DATEDIFF(HOUR, talkDate, getdate()) AS NVARCHAR(50)) between 1 and 23 then CAST(DATEDIFF(HOUR, talkDate, getdate()) AS NVARCHAR(50)) + ' hour ago'
							when  CAST(DATEDIFF(HOUR, talkDate, getdate()) AS NVARCHAR(50)) between 23 and 168 then CAST(DATEDIFF(DAY, talkDate, getdate()) AS NVARCHAR(50)) + ' days ago'
							when  CAST(DATEDIFF(HOUR, talkDate, getdate()) AS NVARCHAR(50)) > 168 then convert(nvarchar(11),talkDate,13) end '@talkDateCaption',
						talkUser '@talkUser', userProfile '@talkUserProfile', iif(@userguid=userguid, 1, null) '@itsMe'
					from (
						select top 100 comment, a.createdDate talkDate, username talkUser, userprofilepath userProfile, userguid
						from chat a
							inner join [user] b on a.talkuser=b.userguid
						where docguid=x.formGUID
						order by a.createddate desc
					) x
					order by talkDate
					for xml path('talk'), type
				) talks
			from @browselist x
			for xml path('row'), elements, type) content
			for xml path(''), elements, type)
			
		--select @browsexml

		select (
			@headerXML
			) header,
			(select '' dashboard, 
				@browsexml [browse], 
				'' form
			for xml path('bodyContent'), elements, type) body,
			'' footer
		for xml path('sqroot')

	if OBJECT_ID('tempdb..#cbFilter') is Not NULL drop table #cbFilter

	end try
	begin catch
		SELECT  
			--ERROR_NUMBER() AS ErrorNumber  
			--,ERROR_SEVERITY() AS ErrorSeverity  
			--,ERROR_STATE() AS ErrorState  
			--,ERROR_PROCEDURE() AS ErrorProcedure  
			--,ERROR_LINE() AS ErrorLine  
			ERROR_MESSAGE() AS message
		for xml path('messages')
	end catch

