CREATE procedure [core].[addModule_createTable] @accountId nvarchar(50), @dataDB nvarchar(50), @v4DB nvarchar(50)=null, @svr nvarchar(50)=null, @isdelTable bit=0, @isdebug bit=0
as

	declare @coreDB nvarchar(50)=db_name()
	if @svr is null set @svr=@@SERVERNAME
	declare @sqlstr nvarchar(max)

	declare #cur CURSOR READ_ONLY FOR
		select distinct migratedb
		from acctdbse a
			inner join acct b on a.AccountGUID=b.AccountGUID
		where (version='3.0' and isnull(migratedb,'')<>'') and AccountId = IIF(isNULL(@accountId, '') = '', AccountID, @accountid)
			and a.migratedb = IIF(isNULL(@v4DB, '') = '', a.migratedb, @v4DB)
			and a.migratedb is not null

	OPEN #cur

	FETCH NEXT FROM #cur INTO @v4db
	WHILE (@@fetch_status = 0)
	BEGIN
		set @sqlstr='
			select * 
			from (
				select ''
					'+iif(@isdeltable=1, '
					if exists(select * from sys.objects where name=''''''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+'''''') 
						drop table doc.[''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''] 	', '')+'
										
					if not exists(select * from sys.objects where name=''''''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+'''''') begin
						create table doc.[''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''] ([DocGUID] [uniqueidentifier] NOT NULL,
						[AccountGUID] [uniqueidentifier] NULL, [ModuleGUID] [uniqueidentifier] NULL, [Status] [int] NOT NULL, 
						[StatusComment] [nvarchar](500) NULL, [CreatedDate] [datetime] NOT NULL, [CreatedUser] [uniqueidentifier] NULL,
						[updatedDate] [datetime] NULL, [updatedUser] [uniqueidentifier] NULL, [isClosed] [bit] NOT NULL, [isDeleted] [bit] NOT NULL,
						[parentDocGUID] [uniqueidentifier] NULL, [oldId] [nvarchar](50) NULL, 
						CONSTRAINT [PK_''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''] PRIMARY KEY CLUSTERED 
						(
							[DocGUID] ASC
						)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
						) ON [PRIMARY]
					'

		set @sqlstr=@sqlstr+'
						ALTER TABLE [doc].[''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''] ADD  CONSTRAINT [DF_''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''_Status]  DEFAULT ((0)) FOR [Status]
						ALTER TABLE [doc].[''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''] ADD  CONSTRAINT [DF_''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''_isClosed]  DEFAULT ((0)) FOR [isClosed]
						ALTER TABLE [doc].[''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''] ADD  CONSTRAINT [DF_''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''_isDeleted]  DEFAULT ((0)) FOR [isDeleted]
						ALTER TABLE [doc].[''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''] ADD  CONSTRAINT [DF_''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
					end
					'

		set @sqlstr=@sqlstr+'
					declare @sqlstr nvarchar(max)
					if not exists(select * from sys.objects where name=''''tg_''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''_updateDate'''') begin
						set @sqlstr=''''
							CREATE TRIGGER [doc].[tg_''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''_updateDate] 
							   ON  [doc].[''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+'']
							   AFTER INSERT, UPDATE
							AS 
							BEGIN
								declare @GUID uniqueidentifier
								select @GUID=docGUID from inserted

								update ''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''
								set updatedDate=getdate()
								from ''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+'' a
									inner join inserted b on a.docGUID=b.docGUID

								declare @c nvarchar(max)=''''''''update: ''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+'', ''''''''+cast(@GUID as nvarchar(50))

								INSERT INTO evnt (EventGUID, AccountGUID, moduleGUID, DocGUID, timeRecord, Comment, CreatedDate, CreatedUser)
								select newid(), null, null, null, 0, @c, getdate(), null

							END
							''''
						print @sqlstr
						exec sp_executesql @sqlstr
					end
					'

		set @sqlstr=@sqlstr+'
					if not exists(select * from sys.objects where name=''''tg_''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''_del'''') begin
						set @sqlstr =''''
							create TRIGGER [doc].[tg_''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''_del]
								ON  [doc].[''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+'']
								AFTER delete
							AS 
							BEGIN
								SET NOCOUNT ON;

								declare @c nvarchar(max)
								set @c=(
									select * 
									FROM deleted
									for xml path(''''''''''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+'''''''''')
								)

								INSERT INTO evnt (EventGUID, AccountGUID, moduleGUID, DocGUID, timeRecord, Comment, CreatedDate, CreatedUser)
								select newid(), null, null, null, 0, @c, getdate(), null
							END
							''''
						print @sqlstr
						exec sp_executesql @sqlstr
					end

						'' script, replace(cast(m.moduleid as nvarchar(50)), ''-'', '''') objectName, ''objects'' tableName, 1 orderNo
					from '+@datadb+'.dbo.modl m
						inner join '+@coredb+'.dbo.acctdbse ad on m.AccountDBGUID=ad.AccountDBGUID
						left join '+@datadb+'.dbo.modlinfo i on m.moduleguid=i.moduleguid and i.infokey=''script_view''
						--left join '+@datadb+'.sys.objects o on m.moduleid=o.name
					where settingmode in (1,2,3,4) and MigrateDB='''+@v4DB+''' --and ad.version=''2.0'' and i.moduleinfoguid is null --and o.name is null 
						and m.moduleid not like ''%APRV''
			'
		set @sqlstr=@sqlstr+'
				union
				select ''
					if not exists(select * from sys.objects where name=''''evnt'''') begin
						CREATE TABLE [dbo].[evnt](
							[EventGUID] [uniqueidentifier] NOT NULL,
							[AccountGUID] [uniqueidentifier] NULL,
							[moduleGUID] [uniqueidentifier] NULL,
							[DocGUID] [uniqueidentifier] NULL,
							[timeRecord] [int] NOT NULL,
							[Comment] [nvarchar](max) NULL,
							[CreatedDate] [datetime] NULL,
							[CreatedUser] [uniqueidentifier] NULL,
						 CONSTRAINT [PK_EVNT] PRIMARY KEY CLUSTERED 
						(
							[EventGUID] ASC
						)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
						) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
					
						ALTER TABLE [dbo].[evnt] ADD  CONSTRAINT [DF_EVNT_EventGUID]  DEFAULT (newid()) FOR [EventGUID]
						ALTER TABLE [dbo].[evnt] ADD  CONSTRAINT [DF_evnt_timeRecord]  DEFAULT ((0)) FOR [timeRecord]
						ALTER TABLE [dbo].[evnt] ADD  CONSTRAINT [DF_evnt_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
					end
						'' script, ''evnt'' objectName, ''objects'' tableName, 2 orderNo
					from '+@datadb+'.dbo.modl m
						inner join '+@coredb+'.dbo.acctdbse ad on m.AccountDBGUID=ad.AccountDBGUID
					where m.moduleid=''evnt''
					'

		set @sqlstr=@sqlstr+'

				union
				select ''
					if not exists(
						select * 
						from sys.objects o inner join sys.columns c on o.object_id=c.object_id 
						where o.name=''''''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+'''''' 
							and c.name=''''''+replace(cast(c.colkey as nvarchar(50)), ''-'', '''')+'''''') 
					begin
						alter table doc.[''+replace(cast(m.moduleid as nvarchar(50)), ''-'', '''')+''] 
							add [''+replace(cast(c.colkey as nvarchar(50)), ''-'', '''')+''] ''+
								case 
									when c.coltype in (59,60,62,122,106) then ''money'' 
									when c.coltype in (40,41,42,43,58,61,189) then ''datetime'' 
									when c.coltype in (48,52,56,108,127,104) then ''bigint'' 
									when c.coltype in (36) then ''uniqueidentifier'' 
									when c.coltype in (231) and c.colLength between 1 and 300 then ''nvarchar(''+cast(c.colLength/2 as nvarchar(5))+'')'' 
									when c.coltype in (167,173,175,239) and c.colLength between 1 and 300 then ''nvarchar(''+cast(c.colLength as nvarchar(5))+'')'' 
									when c.coltype in (167,173,175,231,239) then ''nvarchar(max)'' 
									else ''nvarchar(max)''
								end+'' null

					end'', 
							replace(cast(c.colkey as nvarchar(50)), ''-'', ''''), ''columns'', 13
				--select *  
				from '+@datadb+'.dbo.modl m
					--inner join '+@datadb+'.sys.objects o on replace(cast(m.moduleguid as nvarchar(50)), ''-'', '''')=o.name
					inner join '+@datadb+'.dbo.modlcolm c on m.moduleguid=c.moduleguid
					inner join '+@coredb+'.dbo.acctdbse ad on m.AccountDBGUID=ad.AccountDBGUID
				where settingmode in (1,2,3,4) 
					and colkey not in (''DocGUID'', ''AccountGUID'', ''ModuleGUID'', ''Status'', ''StatusComment'', ''CreatedDate'', ''CreatedUser'', 
						''updatedDate'', ''updatedUser'', ''isClosed'', ''isDeleted'', ''parentDocGUID'', ''oldId'')
					and MigrateDB='''+@v4DB+'''
			'

		set @sqlstr=@sqlstr+'
				union
				select ''
					exec '+@coreDB+'.[core].[addSynonymsTable] ''''''+m.moduleid+'''''', '''''+@dataDB+''''', '''''+@v4DB+''''', '''''+@svr+''''', '+iif(isnull(@isdebug,0)=1, '1', '0')+'
				'', ''synonyms'', ''synonyms'', 21
				--select *  
				from '+@datadb+'.dbo.modl m
				inner join '+@coredb+'.dbo.acctdbse ad on m.AccountDBGUID=ad.AccountDBGUID
				where settingmode in (1,2,3,4) and m.moduleid not like ''%APRV'' AND MigrateDB='''+@v4DB+'''
			) x		
				'

		if @isdebug=1 print @sqlstr
		create table #tmp (script nvarchar(max), objectnm nvarchar(max), tablenm nvarchar(max), o int)
		insert into #tmp (script, objectnm, tablenm, o)
		exec sp_executesql @sqlstr

		DECLARE #cur2 CURSOR
		READ_ONLY
		FOR 
			select script, objectnm, tablenm, o
			from #tmp
			order by o

		--create schema doc
		set @sqlstr='
			if not exists(select * from '+@v4DB+'.sys.schemas where name=''doc'') 
				exec '+@v4DB+'.dbo.sp_executesql N''create schema doc'''
	
		if @isdebug=1 print @sqlstr
		exec sp_executesql @sqlstr

		DECLARE @script nvarchar(max), @name nvarchar(500), @oType nvarchar(500), @ret bit=0, @oNo int
		OPEN #cur2

		FETCH NEXT FROM #cur2 INTO @script, @name, @oType, @oNo
		WHILE (@@fetch_status <> -1)
		BEGIN
			IF (@@fetch_status <> -2)
			BEGIN
				if @isdebug=1 print @script
				set @sqlstr='
					exec '+@svr+'.'+@v4DB+'.dbo.sp_executesql @s'

				set @script=replace(replace(replace(replace(replace(@script, '&amp;', '&'), '&#x0D;', char(13)), '#x0A;', char(10)), '&lt;', '<'), '&gt;', '>')

				select @script+''
				for xml path('')

				if @isdebug=1 print @script
				exec sp_executesql @sqlstr, N'@s nvarchar(max)', @script
			END
			FETCH NEXT FROM #cur2 INTO @script, @name, @oType, @oNo
		END

		CLOSE #cur2
		DEALLOCATE #cur2

		FETCH NEXT FROM #cur INTO @v4db
	END
	CLOSE #cur 
	DEALLOCATE #cur

