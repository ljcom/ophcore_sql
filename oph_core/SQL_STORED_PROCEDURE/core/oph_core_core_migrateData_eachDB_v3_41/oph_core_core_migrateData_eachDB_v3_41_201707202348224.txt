


CREATE procedure [core].[migrateData_eachDB_v3_41] @accountid nvarchar(50), @coreDB nvarchar(50), 
	@dataDB nvarchar(50), @v4DB nvarchar(50), @svr nvarchar(50), @v3db nvarchar(50), @isDelTable bit=0, @isdebug bit=0
as
	if @svr is null set @svr=@@SERVERNAME

	create table #migrate (DocGUID uniqueidentifier, AccountGUID uniqueidentifier, ModuleGUID uniqueidentifier, 
		DocNo nvarchar(50), DocRefNo nvarchar(50), DocDate datetime, DocSummary nvarchar(50), ID nvarchar(50), [Description] nvarchar(50), [Status] int, 
		StatusComment nvarchar(max), CreatedDate datetime, CreatedUser uniqueidentifier, isClosed bit, isDeleted bit)

	declare @accountGUID uniqueidentifier
	select @accountguid=AccountGUID 
	from acct where accountid=@accountid
	
	declare @uGUID uniqueidentifier=newid()	
	declare @sqlstr nvarchar(max)

	set @sqlstr=N'
		select N''
			declare @fieldList nvarchar(max) 
			--declare @docList nvarchar(max) 
			declare @docname nvarchar(50)

			select @docname = replace(cast(moduleid as nvarchar(50)), ''''-'''', '''''''')
			from '+@dataDB+'.dbo.modl m where m.moduleid=''''''+c.moduleid+'''''''

	set @sqlstr=@sqlstr+N'
			--select @docList = 
			--	stuff(
			--		(select '''', [''''+replace(cast(c.columnguid as nvarchar(50)), ''''-'''', '''''''')+'''']''''
			--		from '+@dataDB+'.dbo.modl m
			--			inner join '+@dataDB+'.dbo.modlcolm c on m.moduleguid=c.moduleguid
			--			inner join '+@svr+'.'+@v3db+'.sys.objects a on m.moduleid=stuff(a.name, 2, 1, ''''a'''') and a.type=''''U''''
			--			inner join '+@svr+'.'+@v3db+'.sys.columns b on b.object_id=a.object_id and c.colkey=b.name
			--		where m.moduleid=''''''+c.moduleid+''''''
			--			and colkey not in (''''DocGUID'''', ''''AccountGUID'''', ''''ModuleGUID'''', ''''parentDocGUID'''', ''''oldId'''')
			--			and colkey not like ''''%BLOB''''
			--		order by colorder
			--		for xml path('''''''')), 1, 2, '''''''')'

	set @sqlstr=@sqlstr+N'
			select @fieldList = 
				stuff(
					(select distinct '''', [''''+b.name+'''']'''' 
					from '+@dataDB+'.dbo.modl m
						inner join '+@dataDB+'.dbo.modlcolm c on m.moduleguid=c.moduleguid
						inner join '+@svr+'.'+@v3db+'.sys.objects a on m.moduleid=stuff(a.name, 2, 1, ''''a'''') and a.type=''''U''''
						inner join '+@svr+'.'+@v3db+'.sys.columns b on b.object_id=a.object_id and (c.colkey=b.name or b.name in (''''status'''', ''''statusComment'''', ''''createdDate'''', ''''createdUser'''', ''''updatedDate'''', ''''updatedUser'''', ''''isDeleted'''', ''''isClosed''''))
					where m.moduleid=''''''+c.moduleid+''''''
						and colkey not in (''''DocGUID'''', ''''AccountGUID'''', ''''ModuleGUID'''', ''''parentDocGUID'''', ''''oldId'''')
						and colkey not like ''''%BLOB''''
					--order by colorder
					for xml path('''''''')), 1, 2, '''''''')'

	set @sqlstr=@sqlstr+N'
			insert into '+@dataDB+'.dbo.modlcolminfo (ColumnInfoGUID, ColumnGUID, InfoKey, InfoValue)
			select newid(), c.columnGUID, ''''primaryCol'''', ''''1'''' 
			from '+@dataDB+'.dbo.modl m
				inner join '+@dataDB+'.dbo.modlcolm c
					on m.moduleguid=c.moduleguid and c.colkey=''''''+isnull(cast(primaryKey.colKey as nvarchar(50)),''null'')+''''''
				left join '+@dataDB+'.dbo.modlcolminfo i
					on c.columnguid=i.columnguid and i.infokey=''''primaryCol'''' --and i.infokey=''''1''''
			where m.moduleguid=''''''+isnull(cast(c.moduleguid as nvarchar(50)),''null'')+''''''
				and i.columninfoguid is null
			'

	set @sqlstr=@sqlstr+N'
			declare @xstr nvarchar(max)
			set @xstr=''''
				'+iif(@isDelTable=1, 'delete from '+@v4DB+'.doc.[''''+@docname+'''']', '')+'

				insert into '+@v4DB+'.doc.[''''+@docname+''''] 
					(DocGUID, AccountGUID, ModuleGUID, oldId, ''''+@fieldlist+'''')
				select ''+isnull(cast(primaryKey.colKey as nvarchar(50)),''null'')+'', '''''''''+cast(@accountguid as nvarchar(50))+''''''''', 
					''''''''''+isnull(cast(c.moduleguid as nvarchar(50)),''null'')+'''''''''', 
					''+isnull(cast(primaryKey.colKey as nvarchar(50)),''null'')+'', 
					''''+replace(replace(replace(@fieldlist, ''''[isDeleted]'''', ''''isnull([isDeleted], 0)''''),''''[createdDate]'''', ''''isnull([createdDate], getdate())''''), ''''[status]'''', ''''isnull([status], 0)'''')+''''
				from '+@svr+'.'+@v3db+'.dbo.''+a.name+'' a
					left join (select docguid, oldid, moduleguid from '+@v4DB+'.doc.[''''+@docname+'''']) b 
						on cast(a.''+isnull(cast(primaryKey.colKey as nvarchar(50)),''null'')+'' as nvarchar(50)) = b.oldid
							and b.moduleguid=''''''''''+isnull(cast(c.moduleguid as nvarchar(50)),''null'')+''''''''''
				where b.docGUID is null''''
				
			print @xstr
			exec sp_executesql @xstr

			'' Insertstr, c.moduleid tablename--, b2.name APRVTableName
		into ##tempInsert'+replace(cast(@uGUID as nvarchar(50)), '-', '')+'
		from (select * from '+@svr+'.'+@v3db+'.sys.objects x where x.type=''U'') a 
			inner join '+@dataDB+'.dbo.modl c on c.moduleid=stuff(a.name, 2, 1, ''a'')
			inner join '+@dataDB+'.dbo.modlcolm primaryKey on c.moduleguid=primaryKey.ModuleGUID 
				and primaryKey.colKey in (
					select distinct c.name
					from '+@svr+'.'+@v3db+'.sys.index_columns b 
						inner join '+@svr+'.'+@v3db+'.sys.indexes b1 on b.index_id=b1.index_id and b1.object_id=b.object_id
						inner join '+@svr+'.'+@v3db+'.sys.columns c on c.column_id=b.column_id and c.object_id=b.object_id
							and b1.is_primary_key=1
					where a.object_id=b.object_id)
		where left(a.name,1) not in (''C'', ''D'', ''P'')
				
	'
	
	print @sqlstr
	exec sp_executesql @sqlstr
	set @sqlstr='
		select insertStr, tablename--, APRVTableName 
			from ##tempInsert'+replace(cast(@uGUID as nvarchar(50)), '-', '')+'
			order by tablename

		DECLARE #cur CURSOR
		READ_ONLY
		FOR select insertStr, tablename--, APRVTableName 
			from ##tempInsert'+replace(cast(@uGUID as nvarchar(50)), '-', '')+'
			order by tablename

		DECLARE @insertStr nvarchar(max), @tblName nvarchar(50), @aTblName nvarchar(50)
		OPEN #cur

		FETCH NEXT FROM #cur INTO @insertStr, @tblName--, @aTblName
		WHILE (@@fetch_status <> -1)
		BEGIN
			IF (@@fetch_status <> -2)
			BEGIN
				print @tblName
				print @insertStr
				exec sp_executesql @insertStr
				--exec core.migrateData_addColumns_v2 '''+@accountid+''', '''+@coreDB+''',  '''+@datadb+''', '''+@svr+''', '''+@v3db+''', @tblName
				
				--if isnull(@aTblName, '''')<>'''' begin
				--	exec core.migrateData_addApproval '''+@accountid+''', '''+@coreDB+''',  '''+@datadb+''', '''+@v3db+''', @tblName
				--end
			END
			FETCH NEXT FROM #cur INTO @insertStr, @tblName--, @aTblName
		END

		CLOSE #cur
		DEALLOCATE #cur

		--talk migrate sekaligus
		--exec core.migrateData_addTalk '''+@accountid+''', '''+@coreDB+''',  '''+@datadb+''', '''+@v3db+'''
	'
	--print @sqlstr
	exec sp_executesql @sqlstr

	--update parentdocguid
	set @sqlstr=N'
	
		DECLARE #cur5 CURSOR
		READ_ONLY
		FOR 
			select --c.moduleguid, c.moduleid, cc.colKey, p.moduleguid, p.moduleid, pc.colkey, 
				''update c
				set parentDocGUID=p.docguid
				from '+@v4DB+'.doc.[''+replace(cast(p.moduleid as nvarchar(50)), ''-'', '''')+''] p 
					inner join '+@v4DB+'.doc.[''+replace(cast(c.moduleid as nvarchar(50)), ''-'', '''')+''] c 
					on p.[''+replace(cast(pc.colkey as nvarchar(50)), ''-'', '''')+'']=c.[''+replace(cast(cc.colkey as nvarchar(50)), ''-'', '''')+'']
				--where c.parentDocGUID<>p.docguid
				''
			from '+@dataDB+'.dbo.modl c 
				inner join '+@dataDB+'.dbo.modlcolm cc on c.moduleguid=cc.ModuleGUID 
				inner join '+@dataDB+'.dbo.modlcolminfo cc1 on cc.ColumnGUID=cc1.ColumnGUID 
					and cc1.InfoKey=''isparentkey'' and cc1.InfoValue=''1''
				inner join '+@dataDB+'.dbo.modl p on c.ParentModuleGUID=p.moduleguid
				inner join '+@dataDB+'.dbo.modlcolm pc on p.moduleguid=pc.ModuleGUID 
				inner join '+@dataDB+'.dbo.modlcolminfo pc1 on pc.ColumnGUID=pc1.ColumnGUID 
					and pc1.InfoKey=''primaryCol'' and pc1.InfoValue=''1''
				inner join '+@coredb+'.dbo.acctdbse ad on c.AccountDBGUID=ad.AccountDBGUID
			where c.ParentModuleGUID is not null AND migratedb='''+@v4DB+'''


		DECLARE @sqlstrx nvarchar(max)
		OPEN #cur5

		FETCH NEXT FROM #cur5 INTO @sqlstrx
		WHILE (@@fetch_status <> -1)
		BEGIN
			IF (@@fetch_status <> -2)
			BEGIN
				print @sqlstrx		
				exec sp_executesql @sqlstrx
			END
			FETCH NEXT FROM #cur5 INTO @sqlstrx
		END

		CLOSE #cur5
		DEALLOCATE #cur5'

	print @sqlstr
	exec sp_executesql @sqlstr

